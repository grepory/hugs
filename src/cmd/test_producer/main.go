package main

import (
	"time"

	"github.com/Sirupsen/logrus"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/opsee/hugs/config"
)

var (
	rate = make(chan bool, 1000)
)

func FillChannel() {
	// write to channel at most once per millisecond
	for {
		rate <- true
		time.Sleep(10 * time.Millisecond)
	}
}

func FranticallyWriteToSQS() {
	fixture := `{"check_id":"test","fail_count":0,"first_response":"null","group_id":"potato","content":"potato","group_name":"potato","check_name":"autogenerated-elb-check-5LFywbc7 (potato)","instance_count":1}`
	sqssvc := sqs.New(config.GetConfig().AWSSession)

	for {
		select {
		case <-rate:
			go func() {
				input := &sqs.SendMessageInput{
					DelaySeconds: aws.Int64(0),
					MessageBody:  aws.String(fixture),
					QueueUrl:     aws.String(config.GetConfig().SqsUrl),
				}
				sqssvc.SendMessage(input)
			}()
		}
	}
}

func main() {
	logrus.Info("Producer: Frantically writing messages to SQS-queue \"foo\" in us-east-1.")
	go FillChannel()
	FranticallyWriteToSQS()
}
